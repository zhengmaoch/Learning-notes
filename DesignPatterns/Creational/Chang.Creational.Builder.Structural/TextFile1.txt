1.definition
定义
	Separate the construction of a complex object from its representation so that the same construction process can create different representations. 
	将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
	
2.Frequency of use:   medium low
使用频率：中低

3.participants
参与者

	Builder  (VehicleBuilder)
		specifies an abstract interface for creating parts of a Product object
		为创建一个Product对象的各个部件指定抽象接口。
		
	ConcreteBuilder  (MotorCycleBuilder, CarBuilder, ScooterBuilder)
		constructs and assembles parts of the product by implementing the Builder interface
		实现Builder的接口以构造和装配该产品的各个部件。
		defines and keeps track of the representation it creates
		定义并明确它所创建的表示。
		provides an interface for retrieving the product
		提供一个检索产品的接口。

	Director  (Shop)
		constructs an object using the Builder interface
		构造一个使用Builder接口的对象。
	
	Product  (Vehicle)
		represents the complex object under construction. ConcreteBuilder builds the product's internal representation and defines the process by which it's assembled
		表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程。
		includes classes that define the constituent parts, including interfaces for assembling the parts into the final result
		包含定义组成部件的类，包括将这些部件装配成最终产品的接口。
	
4.适用性

    1.当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。
	
    2.当构造过程必须允许被构造的对象有不同的表示时。

5.协作

	1.客户创建Director对象，并用它所想要的Builder对象进行配置。
	
	2.一旦产品部件被生成，导向器就会通知生成器。
	
	3.生成器处理导向器的请求，并将部件添加到该产品中。
	
	4.客户从生成器中检索产品。
	
6.效果

	1.它使你可以改变一个产品的内部表示
		Builder对象提供给导向器一个构造产品的抽象接口。该接口使得生成器可以隐藏这个产品的表示和内部结构。它同时也隐藏了该产品是如何装配的。
		因为产品是通过抽象接口构造的，你在改变该产品的内部表示时所要做的只是定义一个新的生成器。
		
	2.它将构造代码和表示代码分开
		Builder模式通过封装一个复杂对象的创建和表示方法提高了对象的模块性。客户不需要知道定义产品内部结构的类的所有信息；这些类是不出现在Builder接口中的。
		每个ConcreteBuilder包含了创建和装配一个特定产品的所有代码。这些代码只需要写一次；然后不同的Director可以复用它以在相同部件集合的基础上构造不同的Product。
		
	3.它使你可对构造过程进行更精细的控制
		Builder模式与一下子就生成产品的创建型模式不同，它是在导向者的控制下一步一步构造产品的。仅当该产品完成时导向者才从生成器中取回它。
		因此Builder接口相比其他创建型模式能更好的反映产品的构造过程。这使你可以更精细的控制构建过程，从而能更精细的控制所得产品的内部结构。